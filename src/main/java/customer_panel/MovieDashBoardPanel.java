/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package customer_panel;

import controller.CustomerController;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.function.Consumer;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import main_view.CustomerView;
import main_view.GuestView;
import model.Movie;
/**
 *
 * @author mac
 */
public class MovieDashBoardPanel extends javax.swing.JPanel {
    private static CustomerController customer_controller = CustomerController.getInstance();
    private CustomerView customer_view;
    private GuestView guest_view;
    ArrayList<Movie> movies_list = customer_controller.getMovies();
    
    /**
     * Creates new form MovieDashBoardPanel
     */
    public MovieDashBoardPanel(CustomerView frame) {
        this.customer_view = frame;
      
        initComponents();
    }
    
    public MovieDashBoardPanel(GuestView frame) {
        this.guest_view = frame;
        
        initComponents();
        this.add(tf_search, BorderLayout.NORTH);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tf_search = new javax.swing.JTextField();
        moviesPanel = new javax.swing.JPanel();

        tf_search.setText("Search film here...");
        tf_search.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tf_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_searchActionPerformed(evt);
            }
        });

        setBackground(new java.awt.Color(255, 255, 255));

        moviesPanel.setBackground(new java.awt.Color(255, 255, 255));
        moviesPanel.setLayout(new java.awt.GridBagLayout());

        // Add movies in rows of 4

        add(moviesPanel);
        // Calculate dimensions for positioning
        //int movieWidth = 300;
        //int movieHeight = 450;
        //int columns = 3;
        //int gap = 10;
        //int x = 20, y = 10;
        //
        //// Add movie panels to the moviesPanel
        //for (int i = 0; i < movies_list.size(); i++) {
            //    Movie movie = movies_list.get(i);
            //    JPanel moviePanel = createMoviePanel(movie);
            //
            //    // Set fixed size and position for each panel
            //    moviePanel.setBounds(x, y, movieWidth, movieHeight);
            //    moviesPanel.add(moviePanel);
            //
            //    // Update x and y for next panel
            //    if ((i + 1) % columns == 0) {
                //        x = 20;
                //        y += movieHeight + gap;
                //    } else {
                //        x += movieWidth + gap;
                //    }
            //}
        //
        //// Calculate and set the preferred size of the moviesPanel
        //int rows = (int) Math.ceil((double) movies_list.size() / columns);
        //int panelWidth = columns * (movieWidth + gap) - gap;
        //int panelHeight = rows * (movieHeight + gap) - gap;
        //moviesPanel.setPreferredSize(new Dimension(panelWidth, panelHeight));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10); // Margin around posters
        gbc.fill = GridBagConstraints.BOTH; // Make components fill the available space
        gbc.weightx = 1.0; // Allow horizontal resizing
        gbc.weighty = 1.0; // Allow vertical resizing

        int columns = 3; // Number of columns for the layout
        int currentColumn = 0;

        // Example list of movies
        for (int i = 0; i < movies_list.size(); i++) {
            Movie movie = movies_list.get(i);
            JPanel moviePanel = createMoviePanel(movie);

            // Position movie panels in the grid
            gbc.gridx = currentColumn; // Column index
            gbc.gridy = i / columns; // Row index
            moviesPanel.add(moviePanel, gbc);

            // Move to the next column
            currentColumn++;
            if (currentColumn >= columns) {
                currentColumn = 0;
            }
        }
        // Wrap the moviesPanel in a JScrollPane
        JScrollPane scrollPane = new JScrollPane(moviesPanel);
        scrollPane.getVerticalScrollBar().setUnitIncrement(16);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);

        //// Add the scrollPane to the main panel
        this.setLayout(new BorderLayout());
        this.add(scrollPane, BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void tf_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_searchActionPerformed
    static class ScalableImagePanel extends JPanel {
        private BufferedImage originalImage;

        public ScalableImagePanel(byte[] imageBytes) {
            try (ByteArrayInputStream is = new ByteArrayInputStream(imageBytes)) {
                this.originalImage = ImageIO.read(is);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (originalImage != null) {
                // Dynamically scale the image to the current panel size
                int width = getWidth();
                int height = getHeight();
                g.drawImage(originalImage, 0, 0, width, height, this);
            }
        }
    }
    // Method to create a movie panel
    private JPanel createMoviePanel(Movie movie) {
        JPanel panel = new JPanel(new BorderLayout());
//        panel.setBorder(BorderFactory.createLineBorder(Color.black));
        panel.setPreferredSize(new Dimension(300, 400));
        panel.setBackground(Color.WHITE);
        // Custom scalable image panel
        ScalableImagePanel imagePanel = new ScalableImagePanel(movie.getImage());
        imagePanel.setPreferredSize(new Dimension(300, 360));
        
        panel.add(Box.createRigidArea(new Dimension(0, 10))); 
        // Movie title
        JLabel titleLabel = new JLabel(movie.getTitle(), JLabel.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 17));

        // Add components to the panel
        panel.add(imagePanel, BorderLayout.CENTER);
        panel.add(titleLabel, BorderLayout.SOUTH);
        
        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (customer_view == null){
                    guest_view.showMovieInfo(movie);
                }else{
                    customer_view.showMovieInfo(movie);
                }
                
            }
        });
        return panel;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel moviesPanel;
    private javax.swing.JTextField tf_search;
    // End of variables declaration//GEN-END:variables
}
